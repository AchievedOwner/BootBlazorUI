@page "/alerts"

    <PageTitle Title="警告消息框 Alert">
        使用少量可用的灵活警报消息为典型的用户操作提供上下文反馈消息。
    </PageTitle>

<PresentationPart Title="简单示例">
    <Description>
        @Code.GetCode("设置 `Text` 来填充警告消息框的内容，并可以设置 `Color` 来以根据需要展现不同的主题。若不设置 `Color` 时，警告框的主题颜色为 `ControlColor.Primary` 样式。")
    </Description>
    <RunTemplate>
        <Alert Color="ControlColor.Primary">这是 Primary 警告消息框</Alert>
        <Alert Color="ControlColor.Secondary">这是 Secondary 警告消息框</Alert>
        <Alert Color="ControlColor.Info">这是 Info 警告消息框</Alert>
        <Alert Color="ControlColor.Warning">这是 Warning 警告消息框</Alert>
        <Alert Color="ControlColor.Success">这是 Success 警告消息框</Alert>
        <Alert Color="ControlColor.Danger">这是 Danger 警告消息框</Alert>
        <Alert Color="ControlColor.Light">这是 Light 警告消息框</Alert>
        <Alert Color="ControlColor.Dark">这是 Dark 警告消息框</Alert>
    </RunTemplate>
    <CodeTemplate>
        @Code.GetCode(@"
```html
<Alert Color=""ControlColor.Primary"">这是 Primary 警告消息框</Alert>
<Alert Color=""ControlColor.Secondary"">这是 Secondary 警告消息框</Alert>
<Alert Color=""ControlColor.Info"">这是 Info 警告消息框</Alert>
<Alert Color=""ControlColor.Warning"">这是 Warning 警告消息框</Alert>
<Alert Color=""ControlColor.Success"">这是 Success 警告消息框</Alert>
<Alert Color=""ControlColor.Danger"">这是 Danger 警告消息框</Alert>
<Alert Color=""ControlColor.Light"">这是 Light 警告消息框</Alert>
<Alert Color=""ControlColor.Dark"">这是 Dark 警告消息框</Alert>
```
")
    </CodeTemplate>
</PresentationPart>

<PresentationPart Title="自定义文本">
    <Description>
        可以在 <code>Alert</code> 标记之间定义任意内容。
    </Description>
    <RunTemplate>
        <Alert Color="ControlColor.Success">
            <h4>干得漂亮！</h4>
            <hr />
            <p>
                恭喜！你成功地读到了这条重要的提示信息。这个示例文本将运行更长一点，以便您可以看到警报中的间距是如何处理这类内容的。
            </p>
            <hr />
            当你需要的时候，一定要使用边距工具来保持整洁。
        </Alert>
    </RunTemplate>
    <CodeTemplate>
        @Code.GetCode(@"
```html
<Alert Color=""ControlColor.Success"">
<h4>干得漂亮！</h4>
<hr />
<p>
恭喜！你成功地读到了这条重要的提示信息。这个示例文本将运行更长一点，以便您可以看到警报中的间距是如何处理这类内容的。
</p>
<hr />
当你需要的时候，一定要使用边距工具来保持整洁。
</Alert>
```
")
    </CodeTemplate>
</PresentationPart>
<PresentationPart Title="关闭按钮">
    <Description>
        @Code.GetCode("设置 `Closable` 为 `true` 时，则会在右侧显示一个“X”，点击后可关闭消息框。关闭后，只能通过代码才能将其再次显示。")
    </Description>
    <RunTemplate>
        <Alert Color="ControlColor.Danger" Closable="true">
            对不起，您填写的信息有误"
        </Alert>
    </RunTemplate>
    <CodeTemplate>

        @Code.GetCode(@"
```html
<Alert Color=""ControlColor.Danger"" Closable=""true"">
对不起，您填写的信息有误
</Alert>
```
")
    </CodeTemplate>
</PresentationPart>

<PresentationPart Title="通过代码控制">
    <Description>
        @Code.GetCode("先在 `code` 代码块中声明一个 `Alert` 对象，将该对象通过 `@ref` 绑定到 `Alert` 元素中，调用 `Show()` 显示，调用 `Hide()` 隐藏。")
    </Description>
    <RunTemplate>
        <Button Color="ControlColor.Success" OnClick="@(()=>alertShowHide.Show())">显示</Button>
        <Button Color="ControlColor.Danger" OnClick="@(()=>alertShowHide.Hide())">隐藏</Button>
        <Alert CssClass="mt-3" Color="ControlColor.Info" @ref="alertShowHide">我是一个可爱的对话框</Alert>
    </RunTemplate>
    <CodeTemplate>
        @Code.GetCode(@"
```html
<Button Color=""ControlColor.Success"" OnClick=""@(() => alertShowHide.Show())"">显示</Button>
<Button Color=""ControlColor.Danger"" OnClick=""@(()=>alertShowHide.Hide())"">隐藏</Button>
<Alert CssClass=""mt-3"" Color=""ControlColor.Info"" @ref=""alertShowHide"">我是一个可爱的对话框</Alert>
```
```cs
@code{
Alert alertShowHide = new Alert();
}
```
        ")

    </CodeTemplate>
</PresentationPart>
@code{
    Alert alertShowHide = new Alert();
}
<ArgumentDescriptionTable Title="属性">
    <tr>
        <td>Color</td>
        <td>ControlColor</td>
        <td>设置消息框的主题颜色。默认是 <code>Primary</code>。</td>
    </tr>
    <tr>
        <td>Closable</td>
        <td>Boolean</td>
        <td>
            设置一个布尔值，表示是否在右侧显示一个关闭的“X”按钮，点击后则会隐藏该警告框。
        </td>
    </tr>
    <tr>
        <td>IsShown</td>
        <td>Boolean</td>
        <td>获取一个布尔值，表示消息框的是否为显示状态。默认是 <code>true</code>。</td>
    </tr>
</ArgumentDescriptionTable>
<ArgumentDescriptionTable Title="事件">

    <tr>
        <td>OnShowing</td>
        <td>
            EventCallBack
        </td>
        <td>设置显示之前触发的事件。</td>
    </tr>
    <tr>
        <td>OnHiding</td>
        <td>
            EventCallBack
        </td>
        <td>设置隐藏之前触发的事件。</td>
    </tr>
</ArgumentDescriptionTable>
<ArgumentDescriptionTable Title="方法">

    <tr>
        <td>Show</td>
        <td>Task</td>
        <td>显示当前警告消息框。</td>
    </tr>
    <tr>
        <td>Hide</td>
        <td>Task</td>
        <td>隐藏当前警告消息框。</td>
    </tr>
</ArgumentDescriptionTable>